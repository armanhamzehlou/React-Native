{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar FaceRecognitionService = function () {\n  function FaceRecognitionService() {\n    _classCallCheck(this, FaceRecognitionService);\n    this.isInitialized = false;\n    this.faceDatabase = new Map();\n    this.modelsLoaded = false;\n    this.isWebEnvironment = typeof window !== 'undefined';\n    this.tf = null;\n    this.faceapi = null;\n    this.RNFS = null;\n    this.faceDbPath = '/FaceDB';\n  }\n  _createClass(FaceRecognitionService, [{\n    key: \"loadDependencies\",\n    value: function () {\n      var _loadDependencies = _asyncToGenerator(function* () {\n        try {\n          if (this.isWebEnvironment) {\n            console.log('Web environment detected - running in demo mode');\n            console.log('TensorFlow.js and face-api.js would be loaded here in production');\n            return;\n          }\n          try {\n            this.tf = yield import('@tensorflow/tfjs');\n            yield import('@tensorflow/tfjs-react-native');\n            console.log('TensorFlow.js loaded successfully');\n          } catch (error) {\n            console.warn('TensorFlow.js not available:', error.message);\n          }\n          try {\n            this.faceapi = yield import('face-api.js');\n            console.log('face-api.js loaded successfully');\n          } catch (error) {\n            console.warn('face-api.js not available:', error.message);\n          }\n          try {\n            var rnfsModule = yield import('react-native-fs');\n            this.RNFS = rnfsModule.default;\n            this.faceDbPath = `${this.RNFS.ExternalStorageDirectoryPath}/FaceDB`;\n            console.log('react-native-fs loaded successfully');\n          } catch (error) {\n            console.warn('react-native-fs not available:', error.message);\n          }\n        } catch (error) {\n          console.warn('Some dependencies failed to load:', error.message);\n        }\n      });\n      function loadDependencies() {\n        return _loadDependencies.apply(this, arguments);\n      }\n      return loadDependencies;\n    }()\n  }, {\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator(function* () {\n        if (this.isInitialized) return;\n        try {\n          yield this.loadDependencies();\n          if (this.tf) {\n            yield this.tf.ready();\n            console.log('TensorFlow.js initialized');\n          } else {\n            console.log('TensorFlow.js not available - running in demo mode');\n          }\n          yield this.loadModels();\n          this.isInitialized = true;\n          console.log('Face Recognition Service initialized');\n        } catch (error) {\n          console.error('Failed to initialize Face Recognition Service:', error);\n          throw error;\n        }\n      });\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: \"loadModels\",\n    value: function () {\n      var _loadModels = _asyncToGenerator(function* () {\n        try {\n          console.log('Loading face detection models...');\n          this.modelsLoaded = true;\n          console.log('Models loaded successfully');\n        } catch (error) {\n          console.error('Failed to load models:', error);\n          throw error;\n        }\n      });\n      function loadModels() {\n        return _loadModels.apply(this, arguments);\n      }\n      return loadModels;\n    }()\n  }, {\n    key: \"loadFaceDatabase\",\n    value: function () {\n      var _loadFaceDatabase = _asyncToGenerator(function* () {\n        try {\n          if (!this.RNFS) {\n            console.log('Running in web environment - simulating face database');\n            this.faceDatabase.clear();\n            var testFaces = ['alice.jpg', 'bob.jpg', 'charlie.jpg'];\n            for (var name of testFaces) {\n              var mockDescriptor = new Float32Array(128);\n              for (var i = 0; i < 128; i++) {\n                mockDescriptor[i] = Math.random();\n              }\n              this.faceDatabase.set(name, mockDescriptor);\n            }\n            console.log(`Simulated face database with ${this.faceDatabase.size} faces`);\n            return this.faceDatabase.size;\n          }\n          var exists = yield this.RNFS.exists(this.faceDbPath);\n          if (!exists) {\n            console.log('Creating FaceDB directory:', this.faceDbPath);\n            yield this.RNFS.mkdir(this.faceDbPath);\n            return 0;\n          }\n          var files = yield this.RNFS.readDir(this.faceDbPath);\n          var imageFiles = files.filter(function (file) {\n            return file.isFile() && /\\.(jpg|jpeg|png|bmp)$/i.test(file.name);\n          });\n          console.log(`Found ${imageFiles.length} image files in FaceDB`);\n          this.faceDatabase.clear();\n          for (var file of imageFiles) {\n            try {\n              var descriptor = yield this.extractFaceDescriptor(file.path);\n              if (descriptor) {\n                this.faceDatabase.set(file.name, descriptor);\n                console.log(`Loaded face descriptor for: ${file.name}`);\n              }\n            } catch (error) {\n              console.error(`Failed to process ${file.name}:`, error);\n            }\n          }\n          console.log(`Face database loaded with ${this.faceDatabase.size} faces`);\n          return this.faceDatabase.size;\n        } catch (error) {\n          console.error('Failed to load face database:', error);\n          throw error;\n        }\n      });\n      function loadFaceDatabase() {\n        return _loadFaceDatabase.apply(this, arguments);\n      }\n      return loadFaceDatabase;\n    }()\n  }, {\n    key: \"extractFaceDescriptor\",\n    value: function () {\n      var _extractFaceDescriptor = _asyncToGenerator(function* (imagePath) {\n        try {\n          console.log(`Extracting face descriptor from: ${imagePath}`);\n          var mockDescriptor = new Float32Array(128);\n          for (var i = 0; i < 128; i++) {\n            mockDescriptor[i] = Math.random();\n          }\n          return mockDescriptor;\n        } catch (error) {\n          console.error('Failed to extract face descriptor:', error);\n          return null;\n        }\n      });\n      function extractFaceDescriptor(_x) {\n        return _extractFaceDescriptor.apply(this, arguments);\n      }\n      return extractFaceDescriptor;\n    }()\n  }, {\n    key: \"matchFace\",\n    value: function () {\n      var _matchFace = _asyncToGenerator(function* (imagePath) {\n        try {\n          if (!this.isInitialized) {\n            throw new Error('Face Recognition Service not initialized');\n          }\n          console.log(`Matching face from: ${imagePath}`);\n          if (this.RNFS) {\n            var exists = yield this.RNFS.exists(imagePath);\n            if (!exists) {\n              throw new Error(`Image file not found: ${imagePath}`);\n            }\n          } else {\n            console.log(`Web environment - simulating image processing for: ${imagePath}`);\n          }\n          var inputDescriptor = yield this.extractFaceDescriptor(imagePath);\n          if (!inputDescriptor) {\n            return {\n              match: 'no',\n              error: 'No face detected in input image'\n            };\n          }\n          var bestMatch = null;\n          var bestDistance = Infinity;\n          var threshold = 0.6;\n          for (var _ref of this.faceDatabase) {\n            var _ref2 = _slicedToArray(_ref, 2);\n            var filename = _ref2[0];\n            var dbDescriptor = _ref2[1];\n            var distance = this.calculateDistance(inputDescriptor, dbDescriptor);\n            if (distance < bestDistance) {\n              bestDistance = distance;\n              bestMatch = filename;\n            }\n          }\n          if (bestMatch && bestDistance < threshold) {\n            return {\n              match: 'yes',\n              filename: bestMatch,\n              confidence: (1 - bestDistance).toFixed(3)\n            };\n          } else {\n            return {\n              match: 'no'\n            };\n          }\n        } catch (error) {\n          console.error('Face matching error:', error);\n          throw error;\n        }\n      });\n      function matchFace(_x2) {\n        return _matchFace.apply(this, arguments);\n      }\n      return matchFace;\n    }()\n  }, {\n    key: \"calculateDistance\",\n    value: function calculateDistance(descriptor1, descriptor2) {\n      if (descriptor1.length !== descriptor2.length) {\n        throw new Error('Descriptor lengths do not match');\n      }\n      var sum = 0;\n      for (var i = 0; i < descriptor1.length; i++) {\n        var diff = descriptor1[i] - descriptor2[i];\n        sum += diff * diff;\n      }\n      return Math.sqrt(sum);\n    }\n  }, {\n    key: \"handleIntent\",\n    value: function () {\n      var _handleIntent = _asyncToGenerator(function* (intentData) {\n        try {\n          var imagePath = intentData.imagePath;\n          if (!imagePath) {\n            throw new Error('No image path provided in intent');\n          }\n          return yield this.matchFace(imagePath);\n        } catch (error) {\n          console.error('Intent handling error:', error);\n          throw error;\n        }\n      });\n      function handleIntent(_x3) {\n        return _handleIntent.apply(this, arguments);\n      }\n      return handleIntent;\n    }()\n  }]);\n  return FaceRecognitionService;\n}();\nexport default new FaceRecognitionService();","map":{"version":3,"names":["FaceRecognitionService","_classCallCheck","isInitialized","faceDatabase","Map","modelsLoaded","isWebEnvironment","window","tf","faceapi","RNFS","faceDbPath","_createClass","key","value","_loadDependencies","_asyncToGenerator","console","log","error","warn","message","rnfsModule","default","ExternalStorageDirectoryPath","loadDependencies","apply","arguments","_initialize","ready","loadModels","initialize","_loadModels","_loadFaceDatabase","clear","testFaces","name","mockDescriptor","Float32Array","i","Math","random","set","size","exists","mkdir","files","readDir","imageFiles","filter","file","isFile","test","length","descriptor","extractFaceDescriptor","path","loadFaceDatabase","_extractFaceDescriptor","imagePath","_x","_matchFace","Error","inputDescriptor","match","bestMatch","bestDistance","Infinity","threshold","_ref","_ref2","_slicedToArray","filename","dbDescriptor","distance","calculateDistance","confidence","toFixed","matchFace","_x2","descriptor1","descriptor2","sum","diff","sqrt","_handleIntent","intentData","handleIntent","_x3"],"sources":["/home/runner/workspace/src/services/FaceRecognitionService.js"],"sourcesContent":["\n// Face Recognition Service - uses dynamic imports for compatibility\nclass FaceRecognitionService {\n  constructor() {\n    this.isInitialized = false;\n    this.faceDatabase = new Map(); // Map of filename -> face descriptor\n    this.modelsLoaded = false;\n    this.isWebEnvironment = typeof window !== 'undefined';\n    this.tf = null;\n    this.faceapi = null;\n    this.RNFS = null;\n    this.faceDbPath = '/FaceDB'; // Will be updated after RNFS loads\n  }\n\n  async loadDependencies() {\n    try {\n      // In web environment, skip dynamic imports that cause bundler issues\n      if (this.isWebEnvironment) {\n        console.log('Web environment detected - running in demo mode');\n        console.log('TensorFlow.js and face-api.js would be loaded here in production');\n        return;\n      }\n\n      // Try to load TensorFlow.js (mobile only)\n      try {\n        this.tf = await import('@tensorflow/tfjs');\n        await import('@tensorflow/tfjs-react-native');\n        console.log('TensorFlow.js loaded successfully');\n      } catch (error) {\n        console.warn('TensorFlow.js not available:', error.message);\n      }\n\n      // Try to load face-api.js (mobile only)\n      try {\n        this.faceapi = await import('face-api.js');\n        console.log('face-api.js loaded successfully');\n      } catch (error) {\n        console.warn('face-api.js not available:', error.message);\n      }\n\n      // Try to load react-native-fs (mobile only)\n      try {\n        const rnfsModule = await import('react-native-fs');\n        this.RNFS = rnfsModule.default;\n        this.faceDbPath = `${this.RNFS.ExternalStorageDirectoryPath}/FaceDB`;\n        console.log('react-native-fs loaded successfully');\n      } catch (error) {\n        console.warn('react-native-fs not available:', error.message);\n      }\n\n    } catch (error) {\n      console.warn('Some dependencies failed to load:', error.message);\n    }\n  }\n\n  async initialize() {\n    if (this.isInitialized) return;\n\n    try {\n      // Load dependencies first\n      await this.loadDependencies();\n\n      if (this.tf) {\n        // Initialize TensorFlow\n        await this.tf.ready();\n        console.log('TensorFlow.js initialized');\n      } else {\n        console.log('TensorFlow.js not available - running in demo mode');\n      }\n\n      // Load face-api.js models (you'll need to include model files)\n      await this.loadModels();\n      \n      this.isInitialized = true;\n      console.log('Face Recognition Service initialized');\n    } catch (error) {\n      console.error('Failed to initialize Face Recognition Service:', error);\n      throw error;\n    }\n  }\n\n  async loadModels() {\n    try {\n      // Note: You'll need to include these model files in your assets\n      // For now, we'll use a simplified approach\n      console.log('Loading face detection models...');\n      \n      // In a real implementation, you would load the actual models:\n      // await this.faceapi.nets.tinyFaceDetector.loadFromUri('/assets/models');\n      // await this.faceapi.nets.faceLandmark68Net.loadFromUri('/assets/models');\n      // await this.faceapi.nets.faceRecognitionNet.loadFromUri('/assets/models');\n      \n      this.modelsLoaded = true;\n      console.log('Models loaded successfully');\n    } catch (error) {\n      console.error('Failed to load models:', error);\n      throw error;\n    }\n  }\n\n  async loadFaceDatabase() {\n    try {\n      if (!this.RNFS) {\n        console.log('Running in web environment - simulating face database');\n        // Simulate some test faces for web demo\n        this.faceDatabase.clear();\n        const testFaces = ['alice.jpg', 'bob.jpg', 'charlie.jpg'];\n        for (const name of testFaces) {\n          const mockDescriptor = new Float32Array(128);\n          for (let i = 0; i < 128; i++) {\n            mockDescriptor[i] = Math.random();\n          }\n          this.faceDatabase.set(name, mockDescriptor);\n        }\n        console.log(`Simulated face database with ${this.faceDatabase.size} faces`);\n        return this.faceDatabase.size;\n      }\n\n      // Check if FaceDB directory exists\n      const exists = await this.RNFS.exists(this.faceDbPath);\n      if (!exists) {\n        console.log('Creating FaceDB directory:', this.faceDbPath);\n        await this.RNFS.mkdir(this.faceDbPath);\n        return 0;\n      }\n\n      // Read all image files from the directory\n      const files = await this.RNFS.readDir(this.faceDbPath);\n      const imageFiles = files.filter(file => \n        file.isFile() && /\\.(jpg|jpeg|png|bmp)$/i.test(file.name)\n      );\n\n      console.log(`Found ${imageFiles.length} image files in FaceDB`);\n\n      // Clear existing database\n      this.faceDatabase.clear();\n\n      // Process each image file\n      for (const file of imageFiles) {\n        try {\n          const descriptor = await this.extractFaceDescriptor(file.path);\n          if (descriptor) {\n            this.faceDatabase.set(file.name, descriptor);\n            console.log(`Loaded face descriptor for: ${file.name}`);\n          }\n        } catch (error) {\n          console.error(`Failed to process ${file.name}:`, error);\n        }\n      }\n\n      console.log(`Face database loaded with ${this.faceDatabase.size} faces`);\n      return this.faceDatabase.size;\n    } catch (error) {\n      console.error('Failed to load face database:', error);\n      throw error;\n    }\n  }\n\n  async extractFaceDescriptor(imagePath) {\n    try {\n      // In a real implementation, you would:\n      // 1. Load the image\n      // 2. Detect faces using face-api.js\n      // 3. Extract face descriptors\n      \n      // For now, we'll simulate this with a simple approach\n      console.log(`Extracting face descriptor from: ${imagePath}`);\n      \n      // Simulate face descriptor (in real implementation, this would be the actual descriptor)\n      const mockDescriptor = new Float32Array(128); // Face descriptors are typically 128-dimensional\n      for (let i = 0; i < 128; i++) {\n        mockDescriptor[i] = Math.random(); // Random values for simulation\n      }\n      \n      return mockDescriptor;\n    } catch (error) {\n      console.error('Failed to extract face descriptor:', error);\n      return null;\n    }\n  }\n\n  async matchFace(imagePath) {\n    try {\n      if (!this.isInitialized) {\n        throw new Error('Face Recognition Service not initialized');\n      }\n\n      console.log(`Matching face from: ${imagePath}`);\n\n      // Check if image file exists (skip check in web environment)\n      if (this.RNFS) {\n        const exists = await this.RNFS.exists(imagePath);\n        if (!exists) {\n          throw new Error(`Image file not found: ${imagePath}`);\n        }\n      } else {\n        console.log(`Web environment - simulating image processing for: ${imagePath}`);\n      }\n\n      // Extract face descriptor from input image\n      const inputDescriptor = await this.extractFaceDescriptor(imagePath);\n      if (!inputDescriptor) {\n        return { match: 'no', error: 'No face detected in input image' };\n      }\n\n      // Compare with all faces in database\n      let bestMatch = null;\n      let bestDistance = Infinity;\n      const threshold = 0.6; // Similarity threshold\n\n      for (const [filename, dbDescriptor] of this.faceDatabase) {\n        const distance = this.calculateDistance(inputDescriptor, dbDescriptor);\n        \n        if (distance < bestDistance) {\n          bestDistance = distance;\n          bestMatch = filename;\n        }\n      }\n\n      // Check if best match is within threshold\n      if (bestMatch && bestDistance < threshold) {\n        return {\n          match: 'yes',\n          filename: bestMatch,\n          confidence: (1 - bestDistance).toFixed(3)\n        };\n      } else {\n        return { match: 'no' };\n      }\n\n    } catch (error) {\n      console.error('Face matching error:', error);\n      throw error;\n    }\n  }\n\n  calculateDistance(descriptor1, descriptor2) {\n    // Calculate Euclidean distance between two face descriptors\n    if (descriptor1.length !== descriptor2.length) {\n      throw new Error('Descriptor lengths do not match');\n    }\n\n    let sum = 0;\n    for (let i = 0; i < descriptor1.length; i++) {\n      const diff = descriptor1[i] - descriptor2[i];\n      sum += diff * diff;\n    }\n\n    return Math.sqrt(sum);\n  }\n\n  // Method to handle Android Intents (would be implemented with native modules)\n  async handleIntent(intentData) {\n    try {\n      const { imagePath } = intentData;\n      if (!imagePath) {\n        throw new Error('No image path provided in intent');\n      }\n\n      return await this.matchFace(imagePath);\n    } catch (error) {\n      console.error('Intent handling error:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport default new FaceRecognitionService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}